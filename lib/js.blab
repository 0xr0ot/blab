##
## Make some JavaScript for a web page
##

js {

   main-exp = ("   try{" exp "}catch(e){};" 10)*

   # called from body.onload
   main = "function main() {" 10 main-exp+ "}" 10

   source = RFC-2397.dataurl-iana # | url | uri

   output = "console.log"

   # entry to make some changes to page via dom (just started)
   # todo: build a path to the dom tree, know the type of the (cached) tip object (or have a stack), and call methods and set values of the tip nodes
   # consider this a partial evaluation of a fairly random dom rewriter, which given that it is mostly static javascript, makes tracking issues, if any, a lot easier than if they were made by a randomized dom walker

   dommage = "var foo = document.createTextNode(String(" value ")); document.getElementById(\"spawnery\").appendChild(foo)" textop (";" textop)*

   # foo is a textnode on the page. do something with it.
   textop = "" # not here yet

   exp = dommage | jsp

   # misc js
   jsp = "window.defaultStatus=" value
       | output "(" value ")"
       | "console.log(" value ")"
       | "document.write(" value ("," value)* ")"
       | "document.open(\"" iana.any "\"," ("\"" source "\"" | string) ")"
       | "document.title=\"" (str.string | num.number) "\""
       | "window." ("inner" | "outer") ("Width" | "Height") "=" num.number
       | "window." ("name" | "status") "=" value
       | "window." ("blur" | "focus" | "close" | "print") "()"
       | "window." ("moveBy" | "resizeBy" | "scrollBy" | "scrollTo") "(" num.number "," num.number ")"
       #| "window.prompt(" value ("" | "," value) ")"
       | "window.setInterval(main," num.number ")"
       | "window.setTimeout(main," num.number ")"
       #| "window.confirm(" value ")"
       | "history.go(" ("\"" source "\"" | num.number) ")"
       | "history." ("back" | "forward") "()"
       | array ".length=" num.number
       | "eval(" unquoted-string ")"


   # fixme: move values to proper type rules
   value = num.number 
         | "\"" str.string "\""
         #| "alert(" value ")"
         | regex.js.regex 
         | "document.write(" value ")"
         | "console.log(" value ")"
         | "window.open(\"" (source | value) "\")"
         | "console.log(" value ")"
         | "window.defaultStatus=" value
         | "window." ("document" | "frames" | "history")
         | "document.cookie"
         | "new WebSocket('" source "')"
         | array
         | arrayop
         | array "[" num.number "]"
         | string ".charAt(" num.number ")"
         | string ".charCodeAt(" num.number ")"
         | string ".indexOf(" string ("" | "," num.natural) ")"
         | string ".lastIndexOf(" string ("" | "," num.natural) ")"
         | string ".match(" regex.js.regex ")"
         | string ".replace(" regex.js.regex "," string ")"
         | number
         | date
         | string

   # give me an array
   array 
      = "document.anchors"
      # | "document.forms" # html object collection? ref said it was an array
      | "document.images" # has only getter
      | "document.links"
      | "[" value ("," value)* "]"
      | "(" arrayop ")"
      | string ".split(" ("\"" [0-9a-z ]"\"" | string) ")"  

   # a string the code representation of which has no quotes
   unquoted-string = "String.fromCharCode(" num.natural ("," num.natural)* ")"

   # give me a string
   string = ("\"" 97* "\"" | unquoted-string)
          | ( "(" array ")" ".toString()"
            | string ".concat(" string ("," string)* ")"
            | string ".slice(" num.natural ("" | "," num.natural) ")"
            | string ".substr(" num.natural ("" | "," num.natural) ")"
            | string ".toLowerCase()"
            | string ".toUpperCase()"
            | string ".valueOf()"
            | "String(" value ")"
            | "escape(" string ")"
            | "unescape(" string ")"
            | ("encodeURI" | "decodeURI") ("" | "Component") "(\"" (uri | str.string) "\")"
            | date ".to" ("" | "Time" | "UTC" | "LocaleTime" | "LocaleDate" | "GMT" | "Date") "String()" 
            )

   # give me a number
   number = num.number
          | "parse" ("Int" | "Float") "(\"" (num.number | str.string) "\")"
          | "Infinity" 
          | "NaN"
          | num.natural
          | "Number(" value ")"

   # i want a date
   date = "(new Date(" ("" | num.number | num.number ("," num.number){6}) "))"

   # array -> array stuff
   arrayop = array ".concat(" array ("," array)* ")"
           | array ".join(" value ")"
           | array ".pop()"
           | array ".reverse()"
           | array ".shift()"
           | array ".push(" value ("," value)* ")"
           | array ".unshift(" value ("," value)* ")"
           | array ".slice(" num.natural ("" | "," num.natural) ")"
           | array ".splice(" num.natural "," num.natural ("," value)* ")"
           | array ".sort()"
           #| array ".valueof()"
}
